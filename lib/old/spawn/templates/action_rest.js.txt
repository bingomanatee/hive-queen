var _ = require('underscore');
var util = require('util');
var gate = require('gate');

/** ****************************
 * MODEL: <%- JSON.stringify(model, true, 4) %>
 * ( <%= model_type %> )
 *
 * NOTE - this script assumes that "non-truthy" ids - blank strings, zero, null --
 * are not legitimate keys for storing data in your repo.
 * If this is not true adjust the script accordingly.
 *
 * **************************** */

module.exports = {

	/**
	 * if you want to package your JSON in a
	 * particular format, do it here.
	 */

	_send_JSON: function(context, cb, method){
		context.$send(cb);
	},

	_model: function(){
		return this.model('<%= model_name %>');
	},

	_id_from_context: function(context, data){
		var id;

		id = context[this._url_param_name()];

		if (!id) {
			id = context[this._key_name()];
		}

		<% if (model_type == 'hive_model'){ %>
		if (!id && data) {
			id = this._model()._make_pk(data);
		}
		<% } %>

		return id;
	},

	_record_from_context: function (context){

		var data = {};

 		<% if (model && model.schema) { 		 %>
 		// console.log('getting data from context %s', util.inspect(context, false, 0));

 		<% _.each(model.schema, function(field_def, key){ %>

			<% if (_.isString(field_def)){ %>

			data['<%= field_def %>'] = context['<%= field_def %>'];

			<% } else if (_.isObject(field_def)){ %>

			data['<%= field_def.name %>'] = context['<%= field_def.name %>'];

			<% } else { %>
			// strange field type <%= JSON.stringify(field_def) %> -- <%= key %>

			<% } %>

 		<% }) %>

 		<% } else { %>

 		throw new Error ('!!!! add code to extract record from context !!!!!');

 		<% } %>

 		return data;
	},

	/**
	 * this is the name of the primary key
	 */
	_key_name: function(){
		<% switch(model_type ){
		case 'mongoose': %>
		return '_id';
		<% break;
		case 'hive_model': %>
		return this._model()._pk;
		<% break;
		default: %>
		return '<%= primary_key %>';
		<% } %>
	},

	/**
	 * this is the name of the url parameter
	 * in which IDs are passed into the action.
	 * usually but not always the same as the _key_name().
	 */

	_url_param_name: function(){
		<% if ( url_param_name) { %>
		return '<%= url_param_name %>';
		<% } else { %>
		return this._key_name();
		<% } %>
	},

	/* *********** GET RESPONSES ************** */

	on_get_validate: function(context, cb){
		var self = this;

		<% if (!allow_all) { %>
		var id =  this._id_from_context(context);

		if (!id){
			cb(new Error('cannot find primary key in request'));
		} else {
			cb();
		}
		<% } else { %>cb();<% } %>
	},

	on_get_input: function(context, cb){
		var self = this;
<!-- model_type: <%= model_type %> -->
		var id =  this._id_from_context(context);
		<% if (allow_all) { %>
		if (!id){
		<% switch(model_type){
		case 'mongoose': %>

		this._model().find({}, function(err, records){
			if (err) return cb(err);
			context.$out = records;
			return cb();
		});
		<%  break;
		case 'hive_model': %>
			context.$out = this._model().all().records();
			return cb();
		<%  break;
		 default: %>

		 	//@TODO: inject the part of your model that gets all record
			context.$out = this._model().all();
			return cb();

		<% } %>
		}

		<% } // end allow_all %>
		<% switch(model_type ){
		case 'mongoose': %>
		this._model().findById(id, function(err, record){
			if (err) return cb(err);
			context.$out = record;
			cb();
		})
		<% break;
		case 'hive_model': %>
		this._model().get(id, function(err, record){
			if (err) return cb(err);
			context.$out = record;
			cb();
		})
		<% break;
		default: %>

		// -- presuming your model has a 'get' method; might need to customize.

		this._model().get(id, function(err, record){
			if (err) return cb(err);
			context.$out = record;
			cb();
		})
		<% } %>

	},

	on_get_process: function(context, cb){
		var self = this;

		cb();
	},

	on_get_output: function(context, cb){
		var self = this;

		this._send_JSON(context, cb, 'get')
	},

	/* *********** PUT RESPONSES ************** */

	on_put_validate: function(context, cb){
		var self = this;
		var id =  this._id_from_context(context);
		<% if (model_type ==  'hive_model'){ %>
		if(!id) {
			console.log('warning - no ID in URL');
		}
		cb();
		<% } else { %>
		if (!id){
			return cb(new Error('must inject record ID with hive-model models;'));
		} else {
			cb();
		}
		<% } %>
	},

	on_put_input: function(context, cb){
		var data = this._record_from_context(context);

		<% switch(model_type ){
		case 'mongoose': %>
		var id = this._id_from_context(context, data);
		data[this._key_name()] = id;
		context.$out = new this._model()(data);
		<% break;
		case 'hive_model': %>
		var id = this._id_from_context(context, data);
		data[this._key_name()] = id;
		context.$out = data;
		<% break;
		default: %>
		var id = this._id_from_context(context, data);
		data[this._key_name()] = id;
		context.$out = data;
		<% } %>
 		cb();
	},

	on_put_process: function(context, cb){
		var self = this;

		<% switch(model_type ){
		case 'mongoose': %>
		_.keys(context.$out.toJSON()).forEach(function(key){
			if (key == '_id') return;
			if (context.hasOwnProperty(key)){
				context.$out[key] = context[key];
			}
		});

		context.$out.save(cb);
		<% break;
		case 'hive_model': %>

		this._model().put(context.$out, function(err, record){
			if (err) {
			 	cb(err)
			} else {
				context.$out = record;
				cb();
			}
		});

		<% break;
		default: %>

			_.keys(context.$out.toJSON ? context.$out.toJSON() : context.$out).forEach(function(key){
				if (key == 'id') return;
				if (context.hasOwnProperty(key)){
					context.$out[key] = context[key];
				}
			})

			throw new Error('!!!!!! MUST WRITE PUT MODEL IO !!!!!!!');

		<% } %>
	},


	on_put_output: function(context, cb){
		var self = this;

		this._send_JSON(context, cb, 'put')
	},

	/* *********** POST RESPONSES ************** */

	on_post_validate: function(context, cb){
		var self = this;
		//@TODO: validate content
		cb();
	},

	on_post_input: function(context, cb){
		var data = this._record_from_context(context);

		<% switch(model_type ){
		case 'mongoose': %>
		context.$out = data;
		<% break;
		case 'hive_model': %>

		context.$out = data;
		var id =  this._id_from_context(context, data);

		if (!id){
			return cb(new Error('must inject record ID with hive-model models;'));
		}
		data[this._key_name()] = id;
		context.$out = data;
		cb();
		<% break;
		default: %>
		context.$out = data;

 		cb();
		<% } %>

	},

	on_post_process: function(context, cb){
		var self = this;

		<% switch(model_type ){
		case 'mongoose': %>
		this._model().findByIdAndUpdate(this._id_from_context(context, context.$out), context.$out, function(err,
		record){
			if (err) return cb(err);
		})
		<% break;
		case 'hive_model': %>

		this._model().put(context.$out, function(err, record){
			if (err) {
			 	cb(err)
			} else {
				context.$out = record;
				cb();
			}
		});

		<% break;
		default: %>
		// presumes your model has a "put" method; if not, revise...

		this._model().put(context.$out, function(err, record){
			if (err) {
			 	cb(err)
			} else {
				context.$out = record;
				cb();
			}
		});

		<% } %>
		cb(null, context);
	},

	on_post_output: function(context, cb){
		var self = this;

		this._send_JSON(context, cb, 'put')
	},

	/* *********** DELETE RESPONSES ************** */

	on_delete_validate: function(context, cb){
		var self = this;
		var id = this._id_from_context(context);

		console.log('odvid: %s', id);

		if (!id){
			cb(new Error('cannot find primary in request to delete'));
		} else {
			cb();
		}
	},

	on_delete_input: function(context, cb){
		var self = this;
		var id = this._id_from_context(context);

		<% switch(model_type ){
		case 'mongoose': %>
		this._model().findById(id, function(err, record){
			if (err) return cb(err);
			context.$out = record;
			cb();
		})
		<% break;
		case 'hive_model': %>
		this._model().get(id, function(err, record){
			if (err) return cb(err);
			context.$out = record;
			cb();
		})
		<% break;
		default: %>
		// @TODO presuming your model has a "get" method; if not, revise
		this._model().get(id, function(err, record){
			if (err) return cb(err);
			context.$out = record;
			cb();
		})
		<% } %>
	},

	on_delete_process: function(context, cb){
		var self = this;

		<% switch(model_type ){
		case 'mongoose': %>

		context.$out.remove(cb);

		<% break;
		case 'hive_model': %>

		this._model().delete(context.$out, function(err, record){
			console.log('deleting %s: record %s', util.inspect(context.$out), util.inspect(record));
			if (err) {
			 	cb(err)
			} else {
				context.$out = record;
				cb();
			}
		});

		<% break;
		default: %>
		var data = {};

		// @TODO: presumes your model has a delete model; if not, revise script

		this._model().delete(context.$out, function(err, record){
			if (err) {
			 	cb(err)
			} else {
				context.$out = record;
				cb();
			}
		});

		<% } %>
	},

	on_delete_output: function(context, cb){
		var self = this;

		this._send_JSON(context, cb, 'delete')
		cb();
	}


}